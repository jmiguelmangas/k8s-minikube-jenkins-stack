pipeline {
    agent any
    
    stages {
        stage('üîç Preparaci√≥n') {
            steps {
                script {
                    echo "üöÄ Iniciando pipeline de verificaci√≥n del stack"
                    echo "üìÖ Build: ${BUILD_NUMBER}"
                    echo "üïê Timestamp: ${new Date()}"
                    echo "üë§ Iniciado por: ${env.BUILD_USER ?: 'Sistema'}"
                }
            }
        }
        
        stage('‚úÖ Verificar Herramientas') {
            steps {
                script {
                    echo "üîß Verificando herramientas disponibles..."
                    
                    // Verificar kubectl
                    try {
                        sh 'kubectl version --client=true'
                        echo "‚úÖ kubectl est√° disponible"
                    } catch (Exception e) {
                        echo "‚ùå kubectl no disponible: ${e.message}"
                        echo "üìã Informaci√≥n del sistema:"
                        sh 'which kubectl || echo "kubectl no encontrado en PATH"'
                        sh 'ls -la /usr/local/bin/ || echo "No se puede listar /usr/local/bin"'
                        sh 'echo "PATH: $PATH"'
                        currentBuild.result = 'UNSTABLE'
                    }
                    
                    // Verificar curl
                    try {
                        sh 'curl --version'
                        echo "‚úÖ curl est√° disponible"
                    } catch (Exception e) {
                        echo "‚ùå curl no disponible: ${e.message}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('üîß Conectividad Kubernetes') {
            steps {
                script {
                    echo "üîç Verificando conexi√≥n a Kubernetes..."
                    
                    try {
                        sh 'kubectl get nodes'
                        echo "‚úÖ Conexi√≥n a Kubernetes exitosa"
                    } catch (Exception e) {
                        echo "‚ùå Error conectando a Kubernetes: ${e.message}"
                        
                        // Informaci√≥n de debug
                        echo "üîç Informaci√≥n de debug:"
                        sh 'env | grep -i kube || echo "No hay variables KUBE"'
                        sh 'ls -la ~/.kube/ || echo "No hay directorio .kube"'
                        sh 'cat /var/run/secrets/kubernetes.io/serviceaccount/token | head -c 50 || echo "No hay token"'
                        sh 'whoami && id'
                        
                        currentBuild.result = 'FAILURE'
                        error("No se puede conectar a Kubernetes")
                    }
                }
            }
        }
        
        stage('üìä Estado del Cluster') {
            steps {
                script {
                    echo "üìä Generando reporte del estado del cluster..."
                    
                    try {
                        echo "=== üìÇ NAMESPACES ==="
                        sh 'kubectl get namespaces'
                        
                        echo "\\n=== üöÄ DEPLOYMENTS ==="
                        sh 'kubectl get deployments --all-namespaces'
                        
                        echo "\\n=== üåê SERVICIOS ==="
                        sh 'kubectl get services --all-namespaces'
                        
                        echo "\\n=== üì¶ PODS ==="
                        sh 'kubectl get pods --all-namespaces'
                        
                        echo "\\n=== üíæ VOLUMENES PERSISTENTES ==="
                        sh 'kubectl get pvc --all-namespaces'
                        
                        echo "\\n=== üîç EVENTOS RECIENTES ==="
                        sh 'kubectl get events --all-namespaces --sort-by=.metadata.creationTimestamp | tail -20'
                        
                        echo "‚úÖ Reporte generado exitosamente"
                        
                    } catch (Exception e) {
                        echo "‚ùå Error generando reporte: ${e.message}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('üß™ Test Aplicaciones') {
            parallel {
                stage('üêò Test PostgreSQL') {
                    steps {
                        script {
                            echo "üß™ Testeando PostgreSQL..."
                            try {
                                sh '''
                                    if kubectl get deployment postgresql-deployment -n postgresql-ns &>/dev/null; then
                                        echo "‚úÖ PostgreSQL deployment encontrado"
                                        kubectl get pods -n postgresql-ns -l app=postgresql
                                        
                                        # Verificar si hay pods running
                                        RUNNING_PODS=$(kubectl get pods -n postgresql-ns -l app=postgresql --field-selector=status.phase=Running --no-headers | wc -l)
                                        if [ "$RUNNING_PODS" -gt 0 ]; then
                                            echo "‚úÖ PostgreSQL tiene $RUNNING_PODS pod(s) corriendo"
                                            kubectl exec -n postgresql-ns deployment/postgresql-deployment -- pg_isready -U postgres && echo "‚úÖ PostgreSQL responde correctamente" || echo "‚ö†Ô∏è PostgreSQL no responde"
                                        else
                                            echo "‚ö†Ô∏è No hay pods de PostgreSQL en estado Running"
                                        fi
                                    else
                                        echo "‚ö†Ô∏è PostgreSQL deployment no encontrado"
                                    fi
                                '''
                            } catch (Exception e) {
                                echo "‚ùå Error verificando PostgreSQL: ${e.message}"
                            }
                        }
                    }
                }
                
                stage('üîÑ Test N8N') {
                    steps {
                        script {
                            echo "üß™ Testeando N8N..."
                            try {
                                sh '''
                                    if kubectl get deployment n8n-deployment -n n8n-ns &>/dev/null; then
                                        echo "‚úÖ N8N deployment encontrado"
                                        kubectl get pods -n n8n-ns -l app=n8n
                                        
                                        # Verificar si hay pods running
                                        RUNNING_PODS=$(kubectl get pods -n n8n-ns -l app=n8n --field-selector=status.phase=Running --no-headers | wc -l)
                                        if [ "$RUNNING_PODS" -gt 0 ]; then
                                            echo "‚úÖ N8N tiene $RUNNING_PODS pod(s) corriendo"
                                            # Verificar puerto
                                            kubectl get svc -n n8n-ns
                                        else
                                            echo "‚ö†Ô∏è No hay pods de N8N en estado Running"
                                        fi
                                    else
                                        echo "‚ö†Ô∏è N8N deployment no encontrado"
                                    fi
                                '''
                            } catch (Exception e) {
                                echo "‚ùå Error verificando N8N: ${e.message}"
                            }
                        }
                    }
                }
                
                stage('üèóÔ∏è Test Jenkins') {
                    steps {
                        script {
                            echo "üß™ Testeando Jenkins..."
                            try {
                                sh '''
                                    if kubectl get deployment jenkins-deployment -n jenkins-ns &>/dev/null; then
                                        echo "‚úÖ Jenkins deployment encontrado"
                                        kubectl get pods -n jenkins-ns -l app=jenkins
                                        
                                        # Verificar si hay pods running
                                        RUNNING_PODS=$(kubectl get pods -n jenkins-ns -l app=jenkins --field-selector=status.phase=Running --no-headers | wc -l)
                                        if [ "$RUNNING_PODS" -gt 0 ]; then
                                            echo "‚úÖ Jenkins tiene $RUNNING_PODS pod(s) corriendo"
                                            kubectl get svc -n jenkins-ns
                                        else
                                            echo "‚ö†Ô∏è No hay pods de Jenkins en estado Running"
                                        fi
                                    else
                                        echo "‚ö†Ô∏è Jenkins deployment no encontrado"
                                    fi
                                '''
                            } catch (Exception e) {
                                echo "‚ùå Error verificando Jenkins: ${e.message}"
                            }
                        }
                    }
                }
            }
        }
        
        stage('ü©∫ Diagn√≥stico de Problemas') {
            steps {
                script {
                    echo "üîç Buscando problemas comunes..."
                    
                    try {
                        sh '''
                            echo "=== üö® PODS CON PROBLEMAS ==="
                            kubectl get pods --all-namespaces --field-selector=status.phase!=Running --no-headers | grep -v Completed || echo "No hay pods con problemas"
                            
                            echo "\\n=== üìã LOGS DE PODS CON ERRORES ==="
                            for pod in $(kubectl get pods --all-namespaces --field-selector=status.phase!=Running --no-headers | grep -v Completed | awk '{print $2":"$1}'); do
                                if [ ! -z "$pod" ]; then
                                    POD_NAME=$(echo $pod | cut -d: -f1)
                                    NAMESPACE=$(echo $pod | cut -d: -f2)
                                    echo "\\n--- Logs de $POD_NAME en $NAMESPACE ---"
                                    kubectl logs -n $NAMESPACE $POD_NAME --tail=10 || echo "No se pudieron obtener logs"
                                fi
                            done
                        '''
                    } catch (Exception e) {
                        echo "‚ùå Error en diagn√≥stico: ${e.message}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "üèÅ Pipeline completado - Build #${BUILD_NUMBER}"
                echo "üìÖ Finalizado: ${new Date()}"
                
                // Resumen final
                sh '''
                    echo "\\n=== üìä RESUMEN FINAL ==="
                    echo "Namespaces: $(kubectl get namespaces --no-headers | wc -l)"
                    echo "Deployments: $(kubectl get deployments --all-namespaces --no-headers | wc -l)"
                    echo "Pods corriendo: $(kubectl get pods --all-namespaces --field-selector=status.phase=Running --no-headers | wc -l)"
                    echo "Pods con problemas: $(kubectl get pods --all-namespaces --field-selector=status.phase!=Running --no-headers | grep -v Completed | wc -l)"
                '''
            }
        }
        
        success {
            script {
                echo "üéâ ¬°Pipeline ejecutado exitosamente!"
                echo "‚úÖ Stack verificado correctamente"
                echo ""
                echo "üåê Aplicaciones disponibles:"
                echo "   üìä N8N: http://192.168.1.49:31199"
                echo "   üêò PostgreSQL: 192.168.1.49:30178 (postgres/postgres)"
                echo "   üèóÔ∏è Jenkins: http://localhost:8081 (admin/admin123)"
            }
        }
        
        failure {
            script {
                echo "‚ùå Pipeline fall√≥ - revisar logs para detalles"
                echo "üîç Verificar que kubectl est√© disponible en Jenkins"
                echo "üîç Verificar conectividad a Kubernetes"
                echo "üîç Verificar permisos RBAC del ServiceAccount jenkins"
            }
        }
        
        unstable {
            script {
                echo "‚ö†Ô∏è Pipeline completado con advertencias"
                echo "üîç Revisar los logs para identificar problemas menores"
            }
        }
    }
}
