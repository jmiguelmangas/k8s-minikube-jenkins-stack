apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql-deployment
  namespace: postgresql
  labels:
    app: postgresql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      initContainers:
      - name: init-db
        image: postgres:14
        command:
        - sh
        - -c
        - |
          # Wait for PostgreSQL to be ready
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done
          
          # Create databases for different services
          psql -h localhost -U postgres -c "CREATE DATABASE IF NOT EXISTS n8n;"
          psql -h localhost -U postgres -c "CREATE DATABASE IF NOT EXISTS keycloak;"
          
          # Create users with different privileges based on Keycloak groups
          psql -h localhost -U postgres -c "CREATE USER IF NOT EXISTS n8n WITH PASSWORD 'n8n-password';"
          psql -h localhost -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE n8n TO n8n;"
          
          psql -h localhost -U postgres -c "CREATE USER IF NOT EXISTS jenkins WITH PASSWORD 'jenkins-password';"
          psql -h localhost -U postgres -c "GRANT CONNECT ON DATABASE n8n TO jenkins;"
          
          echo "Database initialization completed"
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-password
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      containers:
      - name: postgresql
        image: postgres:14
        ports:
        - name: postgres
          containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "postgres"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          limits:
            memory: "1Gi"
            cpu: "500m"
          requests:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: postgresql
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: postgresql
  labels:
    app: postgresql
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app: postgresql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgadmin-deployment
  namespace: postgresql
  labels:
    app: pgadmin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgadmin
  template:
    metadata:
      labels:
        app: pgadmin
    spec:
      containers:
      - name: pgadmin
        image: dpage/pgadmin4:latest
        ports:
        - name: http
          containerPort: 80
        env:
        - name: PGADMIN_DEFAULT_EMAIL
          value: "admin@example.com"
        - name: PGADMIN_DEFAULT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pgadmin-secret
              key: password
        - name: PGADMIN_CONFIG_AUTHENTICATION_SOURCES
          value: "['oauth2', 'internal']"
        - name: PGADMIN_CONFIG_OAUTH2_AUTO_CREATE_USER
          value: "True"
        - name: PGADMIN_CONFIG_OAUTH2_CONFIG
          value: |
            {
              'OAUTH2_NAME': 'Keycloak',
              'OAUTH2_DISPLAY_NAME': 'Login with Keycloak',
              'OAUTH2_CLIENT_ID': 'postgresql',
              'OAUTH2_CLIENT_SECRET': 'postgresql-secret',
              'OAUTH2_TOKEN_URL': 'http://keycloak.keycloak.svc.cluster.local:8080/realms/k8s-stack/protocol/openid-connect/token',
              'OAUTH2_AUTHORIZATION_URL': 'http://keycloak.keycloak.svc.cluster.local:8080/realms/k8s-stack/protocol/openid-connect/auth',
              'OAUTH2_API_BASE_URL': 'http://keycloak.keycloak.svc.cluster.local:8080/realms/k8s-stack/protocol/openid-connect/',
              'OAUTH2_USERINFO_ENDPOINT': 'userinfo',
              'OAUTH2_SCOPE': 'openid email profile',
              'OAUTH2_BUTTON_COLOR': '#3366cc'
            }
        volumeMounts:
        - name: pgadmin-storage
          mountPath: /var/lib/pgadmin
        resources:
          limits:
            memory: "512Mi"
            cpu: "250m"
          requests:
            memory: "256Mi"
            cpu: "125m"
        livenessProbe:
          httpGet:
            path: "/misc/ping"
            port: 80
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: "/misc/ping"
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: pgadmin-storage
        persistentVolumeClaim:
          claimName: pgadmin-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pgadmin-pvc
  namespace: postgresql
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: pgadmin
  namespace: postgresql
  labels:
    app: pgadmin
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: pgadmin
